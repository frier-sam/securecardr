/**
 * OCR Results Validation and Correction Component\n * Shows OCR results and allows users to validate and correct extracted information\n */\n\nimport React, { useState, useCallback, useEffect } from 'react';\nimport { parseCardInfo, validateOCRResults } from '../../services/ocr';\nimport { OCRResult, CardFormData } from '../../types';\nimport { CardCategory } from '../../utils/cardCategories';\nimport { CategoryBadge, CategorySelector } from '../../utils/cardCategories';\nimport { validateCardData } from '../../utils/cardValidation';\n\ninterface OCRValidationProps {\n  ocrResult: OCRResult;\n  originalImage: File;\n  onAccept: (correctedData: Partial<CardFormData>) => void;\n  onReject: () => void;\n  onRetry: () => void;\n  className?: string;\n}\n\ntype ValidationStatus = 'pending' | 'validating' | 'complete';\n\nexport function OCRValidation({\n  ocrResult,\n  originalImage,\n  onAccept,\n  onReject,\n  onRetry,\n  className = '',\n}: OCRValidationProps) {\n  const [validationStatus, setValidationStatus] = useState<ValidationStatus>('pending');\n  const [parsedInfo, setParsedInfo] = useState<ReturnType<typeof parseCardInfo> | null>(null);\n  const [validationResult, setValidationResult] = useState<ReturnType<typeof validateOCRResults> | null>(null);\n  \n  // Editable fields\n  const [cardNumber, setCardNumber] = useState('');\n  const [expiryDate, setExpiryDate] = useState('');\n  const [cardholderName, setCardholderName] = useState('');\n  const [nickname, setNickname] = useState('');\n  const [category, setCategory] = useState<CardCategory>('credit');\n  const [notes, setNotes] = useState('');\n  \n  const [fieldErrors, setFieldErrors] = useState<Record<string, string>>({});\n  const [imagePreview, setImagePreview] = useState<string>('');\n\n  // Generate image preview\n  useEffect(() => {\n    const url = URL.createObjectURL(originalImage);\n    setImagePreview(url);\n    return () => URL.revokeObjectURL(url);\n  }, [originalImage]);\n\n  // Parse OCR results on mount\n  useEffect(() => {\n    setValidationStatus('validating');\n    \n    try {\n      const parsed = parseCardInfo(ocrResult);\n      const validation = validateOCRResults(parsed);\n      \n      setParsedInfo(parsed);\n      setValidationResult(validation);\n      \n      // Pre-fill form fields\n      setCardNumber(parsed.cardNumber || '');\n      setExpiryDate(parsed.expiryDate || '');\n      setCardholderName(parsed.cardholderName || '');\n      setCategory(parsed.suggestedCategory || 'credit');\n      \n      // Generate nickname from cardholder name or category\n      if (parsed.cardholderName) {\n        setNickname(`${parsed.cardholderName}'s Card`);\n      } else {\n        const categoryInfo = {\n          credit: 'Credit Card',\n          debit: 'Debit Card',\n          loyalty: 'Loyalty Card',\n          id: 'ID Card',\n          other: 'Card',\n        };\n        setNickname(`My ${categoryInfo[parsed.suggestedCategory || 'credit']}`);\n      }\n      \n      setValidationStatus('complete');\n    } catch (error) {\n      console.error('OCR parsing failed:', error);\n      setValidationStatus('complete');\n    }\n  }, [ocrResult]);\n\n  // Validate form fields\n  const validateFields = useCallback(() => {\n    const formData: CardFormData = {\n      category,\n      nickname,\n      number: cardNumber,\n      expiryDate,\n      notes,\n      issueDate: '',\n    };\n    \n    const validation = validateCardData(formData);\n    setFieldErrors(validation.errors);\n    return validation.isValid;\n  }, [category, nickname, cardNumber, expiryDate, notes]);\n\n  const handleAccept = useCallback(() => {\n    if (!validateFields()) {\n      return;\n    }\n    \n    const correctedData: Partial<CardFormData> = {\n      category,\n      nickname,\n      number: cardNumber || undefined,\n      expiryDate: expiryDate || undefined,\n      notes: notes || undefined,\n      image: originalImage,\n    };\n    \n    onAccept(correctedData);\n  }, [category, nickname, cardNumber, expiryDate, notes, originalImage, onAccept, validateFields]);\n\n  const handleFieldChange = useCallback((field: string, value: string) => {\n    switch (field) {\n      case 'cardNumber':\n        setCardNumber(value);\n        break;\n      case 'expiryDate':\n        setExpiryDate(value);\n        break;\n      case 'cardholderName':\n        setCardholderName(value);\n        break;\n      case 'nickname':\n        setNickname(value);\n        break;\n      case 'notes':\n        setNotes(value);\n        break;\n    }\n    \n    // Clear field error when user starts typing\n    if (fieldErrors[field]) {\n      setFieldErrors(prev => ({ ...prev, [field]: '' }));\n    }\n  }, [fieldErrors]);\n\n  if (validationStatus === 'validating') {\n    return (\n      <div className={`bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-4xl mx-auto p-8 ${className}`}>\n        <div className=\"flex items-center justify-center space-x-3\">\n          <div className=\"w-8 h-8 border-4 border-primary-600 border-t-transparent rounded-full animate-spin\"></div>\n          <div className=\"text-lg text-gray-900 dark:text-white\">Processing OCR Results...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className={`bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-6xl mx-auto ${className}`}>\n      {/* Header */}\n      <div className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"text-xl font-semibold text-gray-900 dark:text-white\">\n              Review OCR Results\n            </h3>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n              Verify and correct the extracted information below\n            </p>\n          </div>\n          \n          {parsedInfo && (\n            <div className=\"text-right\">\n              <div className=\"text-sm text-gray-500 dark:text-gray-400\">Confidence</div>\n              <div className={`text-lg font-semibold ${\n                parsedInfo.confidence >= 80 ? 'text-green-600 dark:text-green-400' :\n                parsedInfo.confidence >= 60 ? 'text-yellow-600 dark:text-yellow-400' :\n                'text-red-600 dark:text-red-400'\n              }`}>\n                {parsedInfo.confidence}%\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Validation Alerts */}\n      {validationResult && (\n        <div className=\"p-6 space-y-4\">\n          {!validationResult.isReliable && (\n            <div className=\"bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4\">\n              <div className=\"flex\">\n                <svg className=\"w-5 h-5 text-yellow-600 dark:text-yellow-400 mr-2 mt-0.5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n                </svg>\n                <div className=\"text-sm\">\n                  <p className=\"text-yellow-800 dark:text-yellow-200 font-medium mb-1\">\n                    Low Confidence Results\n                  </p>\n                  <p className=\"text-yellow-700 dark:text-yellow-300\">\n                    Please carefully review and correct the extracted information below.\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          {validationResult.warnings.length > 0 && (\n            <div className=\"bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4\">\n              <div className=\"flex\">\n                <svg className=\"w-5 h-5 text-red-500 mr-2 mt-0.5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z\" clipRule=\"evenodd\" />\n                </svg>\n                <div className=\"text-sm\">\n                  <p className=\"text-red-800 dark:text-red-200 font-medium mb-2\">Validation Issues Found</p>\n                  <ul className=\"text-red-700 dark:text-red-300 space-y-1\">\n                    {validationResult.warnings.map((warning, index) => (\n                      <li key={index}>â€¢ {warning}</li>\n                    ))}\n                  </ul>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Main Content */}\n      <div className=\"p-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Original Image */}\n          <div className=\"space-y-4\">\n            <h4 className=\"font-medium text-gray-900 dark:text-white\">Original Image</h4>\n            <div className=\"relative\">\n              <img\n                src={imagePreview}\n                alt=\"Original card image\"\n                className=\"w-full h-64 object-cover rounded-lg border border-gray-300 dark:border-gray-600\"\n              />\n              <div className=\"absolute top-2 right-2\">\n                <button\n                  onClick={onRetry}\n                  className=\"px-3 py-1 bg-black/50 text-white text-sm rounded-md hover:bg-black/70 transition-colors\"\n                >\n                  Retake Photo\n                </button>\n              </div>\n            </div>\n            \n            {/* Raw OCR Text */}\n            <div>\n              <h5 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Raw OCR Text</h5>\n              <div className=\"bg-gray-50 dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-lg p-3\">\n                <pre className=\"text-xs text-gray-600 dark:text-gray-400 whitespace-pre-wrap overflow-x-auto\">\n                  {ocrResult.text || 'No text detected'}\n                </pre>\n              </div>\n            </div>\n          </div>\n\n          {/* Extracted Information Form */}\n          <div className=\"space-y-6\">\n            <h4 className=\"font-medium text-gray-900 dark:text-white\">Extracted Information</h4>\n            \n            {/* Category Selection */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Card Type\n              </label>\n              <CategorySelector\n                selectedCategory={category}\n                onCategorySelect={setCategory}\n                layout=\"list\"\n                className=\"space-y-2\"\n              />\n            </div>\n\n            {/* Nickname */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Card Nickname *\n              </label>\n              <input\n                type=\"text\"\n                value={nickname}\n                onChange={(e) => handleFieldChange('nickname', e.target.value)}\n                className={`w-full px-3 py-2 border rounded-md text-sm ${\n                  fieldErrors.nickname ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'\n                } focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-800 dark:text-white`}\n                placeholder=\"e.g., My Credit Card\"\n              />\n              {fieldErrors.nickname && (\n                <p className=\"mt-1 text-sm text-red-600 dark:text-red-400\">{fieldErrors.nickname}</p>\n              )}\n            </div>\n\n            {/* Card Number */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Card Number\n                {parsedInfo?.cardNumber && (\n                  <span className=\"ml-2 text-xs px-2 py-1 bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200 rounded-full\">\n                    Detected\n                  </span>\n                )}\n              </label>\n              <input\n                type=\"text\"\n                value={cardNumber}\n                onChange={(e) => handleFieldChange('cardNumber', e.target.value)}\n                className={`w-full px-3 py-2 border rounded-md text-sm font-mono ${\n                  fieldErrors.number ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'\n                } focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-800 dark:text-white`}\n                placeholder=\"1234 5678 9012 3456\"\n              />\n              {fieldErrors.number && (\n                <p className=\"mt-1 text-sm text-red-600 dark:text-red-400\">{fieldErrors.number}</p>\n              )}\n            </div>\n\n            {/* Expiry Date */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Expiry Date\n                {parsedInfo?.expiryDate && (\n                  <span className=\"ml-2 text-xs px-2 py-1 bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200 rounded-full\">\n                    Detected\n                  </span>\n                )}\n              </label>\n              <input\n                type=\"text\"\n                value={expiryDate}\n                onChange={(e) => handleFieldChange('expiryDate', e.target.value)}\n                className={`w-full px-3 py-2 border rounded-md text-sm font-mono ${\n                  fieldErrors.expiryDate ? 'border-red-500' : 'border-gray-300 dark:border-gray-600'\n                } focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-800 dark:text-white`}\n                placeholder=\"MM/YY\"\n              />\n              {fieldErrors.expiryDate && (\n                <p className=\"mt-1 text-sm text-red-600 dark:text-red-400\">{fieldErrors.expiryDate}</p>\n              )}\n            </div>\n\n            {/* Cardholder Name */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Cardholder Name\n                {parsedInfo?.cardholderName && (\n                  <span className=\"ml-2 text-xs px-2 py-1 bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200 rounded-full\">\n                    Detected\n                  </span>\n                )}\n              </label>\n              <input\n                type=\"text\"\n                value={cardholderName}\n                onChange={(e) => handleFieldChange('cardholderName', e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-800 dark:text-white\"\n                placeholder=\"John Doe\"\n              />\n            </div>\n\n            {/* Notes */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n                Notes (Optional)\n              </label>\n              <textarea\n                value={notes}\n                onChange={(e) => handleFieldChange('notes', e.target.value)}\n                rows={3}\n                className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-800 dark:text-white resize-vertical\"\n                placeholder=\"Additional notes about this card...\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Actions */}\n      <div className=\"p-6 border-t border-gray-200 dark:border-gray-700 flex justify-between\">\n        <div className=\"flex space-x-3\">\n          <button\n            onClick={onReject}\n            className=\"px-4 py-2 text-sm text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 rounded-md transition-colors\"\n          >\n            Start Over\n          </button>\n          <button\n            onClick={onRetry}\n            className=\"px-4 py-2 text-sm text-gray-700 dark:text-gray-300 border border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-md transition-colors\"\n          >\n            Retake Photo\n          </button>\n        </div>\n        \n        <button\n          onClick={handleAccept}\n          className=\"px-6 py-2 text-sm bg-primary-600 hover:bg-primary-700 text-white rounded-md transition-colors flex items-center space-x-2\"\n        >\n          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n          </svg>\n          <span>Accept & Save Card</span>\n        </button>\n      </div>\n    </div>\n  );\n}\n